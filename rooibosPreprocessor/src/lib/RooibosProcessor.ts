import * as Debug from 'debug';

import FileDescriptor from './FileDescriptor';
import FunctionMap from './FunctionMap';
import { RuntimeConfig } from './RuntimeConfig';

const debug = Debug('RooibosProcessor');

export default class RooibosProcessor {
  constructor(testsPath) {
    if (!testsPath) {
      throw new Error('testsPath is empty');
    }
    this._testsPath = testsPath;
    this._warnings = [];
    this._errors = [];
    this._mapFilename = `rooibosFunctionMap.brs`;
  }

  private readonly _testsPath: string;
  private readonly _mapFilename: string;
  private readonly _warnings: string[];
  private readonly _errors: string[];

  get errors(): string[] {
    return this._errors;
  }

  get warnings(): string[] {
    return this._warnings;
  }

  get testsPath(): string {
    return this._testsPath;
  }

  public processFiles() {
    debug(`Running processor at path ${this.testsPath} `);

    let outputText = this.createFileHeaderText();
    let functionMap = new FunctionMap();

    debug(`Adding runtimeConfig `);
    let runtimeConfig = new RuntimeConfig(functionMap);
    runtimeConfig.processPath(this.testsPath);

    debug(`Adding function map `);
    outputText += '\n' + functionMap.getFunctionMapText();

    outputText += '\n' + this.createTestsHeaderText();
    outputText += '\n' + runtimeConfig.createTestSuiteLookupFunction();
    outputText += '\n' + this.createFileFooterText();

    const file = new FileDescriptor(this.testsPath, this._mapFilename, '.brs');
    file.setFileContents(outputText);
    debug(`Writing to ${file.fullPath}`);
    file.saveFileContents();

    this.errors.concat(runtimeConfig.errors);
    this.warnings.concat(runtimeConfig.warnings);
    this.reportErrors();
    this.reportWarnings();
  }

  public reportErrors() {
    if (this.errors.length > 0) {

      console.log(`
    The following errors occurred during processing:

    ======
    `);
      this.errors.forEach( (errorText) => console.log(`[ERROR] ${errorText}`));
      console.log(`
    ======
    `);
    }
  }

  public reportWarnings() {
    if (this.warnings.length > 0) {

      console.log(`
    The following warnings occurred during processing:

    ======
    `);
      this.warnings.forEach( (errorText) => console.log(`[WARN] ${errorText}`));
      console.log(`
    ======
    `);
    }
  }

  public createFileHeaderText(): string {
    return `
    '***************************************************
    ' This file is generated by rooibos. DO NOT EDIT. RTM please :)
    ' ***************************************************
    `;
  }

  public createFileFooterText(): string {
    return `

    '***************************************************
    ' This file is generated by rooibos. DO NOT EDIT. RTM please :)
    ' ***************************************************
    `;
  }

  public createTestsHeaderText(): string {
    return `
    '***************************************************
    ' Unit test suites defitintions
    '***************************************************
    `;
  }
}
