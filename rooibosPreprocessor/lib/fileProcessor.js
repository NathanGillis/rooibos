const path = require('path');
const fs = require('fs-extra');
const replaceExt = require('replace-ext');
const debug = require('debug')('fileProcessor');

class FileProcessor {
	constructor(filePath) {
		this._filePath = filePath;
		this._mapFileName = "rooibos.function.map.brs";
		this._warnings = [];
		this._errors = [];
	}

	processFiles() {
		debug(`Running processor at path ${this._filePath} `);
		let maps = this.getFunctionMaps(this._filePath);
		let fileText = this.createMapFileContent(maps);
		this.writeMapsToFile(this._filePath, fileText);
	}

	writeMapsToFile(filePath, fileText) {
		let outputFilePath = path.join(this._filePath, this._mapFileName);
		// console.log(`===========`);
		// console.log(fileText);
		// console.log(`===========`);
		fs.writeFileSync(outputFilePath, fileText,'utf8');
		console.log(`Wrote file to ${outputFilePath}`);
	}

	createMapFileContent(maps) {
		var text = this.createWarningText();
		text += this.createGetFunctionsForFile(maps);
		for (let filename in maps){
			text += this.createFilenameMap(filename, maps[filename]);
		}
		return text;
	}

	createGetFunctionsForFile(maps) {
		var text = "function RBSFM_getFunctionsForFile(filename)\n" +
			"  map = {\n";
		for (let filename in maps){
			text += `    "${filename}":RBSFM_getFunctions_${filename} \n`;
		}
		text +=	"  } \n" +
			"  return map[filename]\n" +
			"end function\n\n";

		return text;
	}

	createFilenameMap(filename, functionNames) {
		var text = `function RBSFM_getFunctions_${filename}()\n` +
			"  return {\n";
		functionNames.forEach(functionName =>{
			text += `    "${functionName}":${functionName} \n`;
		});
		text +=	"  } \n\n" +
			"end function\n\n";
		return text;
	}

	createWarningText() {
		return "'***************************************************\n" +
			"'This file is generated by rooibos. Do not edit it unless you \n" +
			"'don't wan't your unit tests to work properly anymore\n" +
			"'***************************************************\n\n";
	}



	/**
	 * Find all files inside a dir, recursively and extract functions
	 * @function getAllFiles
	 * @param  {string} dir Dir directory string.
	 * @return {string[]} Array with all file names that are inside the directory.
	 */
	getFunctionMaps(directory) {
		debug(`Creating file descriptors processor at path ${directory} `);
		//TODO - make async.
		var functionMaps = {}
		fs.readdirSync(directory).forEach(filename => {
			const fullPath = path.join(directory, filename);
			// console.log(`processing file `, filename)
			if (fs.statSync(fullPath).isDirectory()) {
				this.getFunctionMaps(fullPath);
			} else {
				const extension = path.extname(filename).toLowerCase();
				if (extension == '.brs' && filename != this._mapFileName) {
					var map = this.getFunctionMap(directory, filename);
					functionMaps[filename.replace(".brs", "")] = map
				}
			}
		});
		return functionMaps
		console.log(`resulting maps are ${JSON.stringify(functionMaps)}`)
	}


	/**
	 * get the function map text for the given file
	 * @param directory
	 * @param filename
	 * @param assoicatedFile
	 */
	getFunctionMap(directory, filename) {
		let fullPath = path.join(directory, filename);
		console.debug(`processing file `, fullPath)
		let fileContents = fs.readFileSync(fullPath, 'utf8');

		//brute force, get EVERY function declaration!
		let functionRegex = "^(function|sub)\\s+(.*[^\\(])\\("
		let matches = this.getFunctionsMatchesValues(fileContents, functionRegex, 2)
		// console.log(`got matches `, matches)
		return matches
	}


	getFunctionsMatchesValues(input, pattern, groupIndex){
		let values = [], matches = [];
		const regex = new RegExp(pattern, 'gim');
		while (matches = regex.exec(input)) {
			values.push(matches[groupIndex]);
		}
		return values;
	}
}

module.exports = FileProcessor